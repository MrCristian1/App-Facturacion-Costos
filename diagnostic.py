"""
Herramienta de Diagn√≥stico Final
Permite al usuario verificar exactamente qu√© est√° pasando con sus archivos reales
"""

import sys
import os

# Agregar src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def diagnostic_tool():
    """Herramienta interactiva de diagn√≥stico"""
    print("="*70)
    print("üîç HERRAMIENTA DE DIAGN√ìSTICO - APP FACTURACI√ìN")
    print("="*70)
    print()
    print("Esta herramienta te ayudar√° a identificar exactamente qu√© est√°")
    print("causando que aparezcan n√∫meros en lugar de nombres en tu PDF.")
    print()
    
    try:
        from src.pdf_extractor import PDFExtractor
        from src.excel_processor import ExcelProcessor
        from src.data_matcher import DataMatcher
        
        # 1. Verificar archivos
        print("1Ô∏è‚É£  VERIFICACI√ìN DE ARCHIVOS:")
        print("-" * 40)
        
        pdf_path = input("üìÑ Ingresa la ruta completa de tu archivo PDF: ").strip()
        if not os.path.exists(pdf_path):
            print(f"‚ùå ERROR: El archivo PDF no existe: {pdf_path}")
            return
        
        excel_path = input("üìä Ingresa la ruta completa de tu archivo Excel: ").strip()
        if not os.path.exists(excel_path):
            print(f"‚ùå ERROR: El archivo Excel no existe: {excel_path}")
            return
        
        print("‚úÖ Ambos archivos existen")
        print()
        
        # 2. An√°lisis del PDF
        print("2Ô∏è‚É£  AN√ÅLISIS DEL PDF:")
        print("-" * 40)
        
        pdf_extractor = PDFExtractor(pdf_path)
        text_preview = pdf_extractor.get_text_preview(300)
        
        print("üìã Vista previa del texto del PDF:")
        print(f"   {text_preview}")
        print()
        
        employees_data = pdf_extractor.extract_employees_data()
        print(f"üë• Empleados extra√≠dos del PDF: {len(employees_data)}")
        
        for i, emp in enumerate(employees_data[:5], 1):  # Mostrar m√°ximo 5
            nombre = emp.get('nombre', '')
            cedula = emp.get('cedula', '')
            print(f"   {i}. nombre: '{nombre}' | c√©dula: '{cedula}'")
            
            if nombre == cedula:
                print(f"      ‚ö†Ô∏è  PROBLEMA DETECTADO: nombre igual a c√©dula")
            elif nombre.isdigit():
                print(f"      ‚ö†Ô∏è  PROBLEMA DETECTADO: nombre es un n√∫mero")
            elif not nombre:
                print(f"      ‚ÑπÔ∏è  Nombre vac√≠o (normal si el PDF solo tiene c√©dulas)")
        
        if len(employees_data) > 5:
            print(f"   ... y {len(employees_data) - 5} empleados m√°s")
        print()
        
        # 3. An√°lisis del Excel
        print("3Ô∏è‚É£  AN√ÅLISIS DEL EXCEL:")
        print("-" * 40)
        
        excel_processor = ExcelProcessor(excel_path)
        excel_processor.load_excel()
        
        column_mapping = excel_processor.detect_columns()
        print(f"üìä Columnas detectadas: {column_mapping}")
        
        all_excel_employees = excel_processor.get_all_employees()
        print(f"üë• Empleados en Excel: {len(all_excel_employees)}")
        
        for i, emp in enumerate(all_excel_employees[:5], 1):  # Mostrar m√°ximo 5
            nombre = emp.get('nombre', '')
            cedula = emp.get('cedula', '')
            centro_costo = emp.get('centro_costo', '')
            print(f"   {i}. nombre: '{nombre}' | c√©dula: '{cedula}' | centro: '{centro_costo}'")
        
        if len(all_excel_employees) > 5:
            print(f"   ... y {len(all_excel_employees) - 5} empleados m√°s")
        print()
        
        # 4. An√°lisis de coincidencias
        print("4Ô∏è‚É£  AN√ÅLISIS DE COINCIDENCIAS:")
        print("-" * 40)
        
        cedulas_pdf = [emp.get('cedula', '') for emp in employees_data if emp.get('cedula')]
        cedulas_excel = [emp.get('cedula', '') for emp in all_excel_employees if emp.get('cedula')]
        
        print(f"üìÑ C√©dulas en PDF: {len(cedulas_pdf)}")
        print(f"üìä C√©dulas en Excel: {len(cedulas_excel)}")
        
        # Verificar coincidencias
        coincidencias = []
        for cedula_pdf in cedulas_pdf:
            for cedula_excel in cedulas_excel:
                if str(cedula_pdf).strip() == str(cedula_excel).strip():
                    # Buscar el nombre correspondiente
                    excel_emp = next((emp for emp in all_excel_employees if str(emp.get('cedula', '')).strip() == str(cedula_excel).strip()), None)
                    if excel_emp:
                        coincidencias.append({
                            'cedula': cedula_pdf,
                            'nombre_excel': excel_emp.get('nombre', ''),
                            'centro_costo': excel_emp.get('centro_costo', '')
                        })
                    break
        
        print(f"‚úÖ Coincidencias encontradas: {len(coincidencias)}")
        
        for i, match in enumerate(coincidencias[:5], 1):
            print(f"   {i}. C√©dula: {match['cedula']} -> Nombre: '{match['nombre_excel']}' | Centro: '{match['centro_costo']}'")
        
        if len(coincidencias) > 5:
            print(f"   ... y {len(coincidencias) - 5} coincidencias m√°s")
        print()
        
        # 5. Simulaci√≥n del proceso completo
        print("5Ô∏è‚É£  SIMULACI√ìN DEL PROCESO COMPLETO:")
        print("-" * 40)
        
        matcher = DataMatcher(pdf_extractor, excel_processor)
        matching_results = matcher.perform_full_matching(0.7)
        
        print(f"üîç Matching completado:")
        print(f"   Encontrados: {len(matching_results.get('matched', []))}")
        print(f"   No encontrados: {len(matching_results.get('unmatched', []))}")
        print()
        
        # Datos consolidados
        consolidated_data = matcher.get_consolidated_data()
        print(f"üìã Datos consolidados: {len(consolidated_data)} empleados")
        
        problem_detected = False
        for i, emp in enumerate(consolidated_data[:5], 1):
            nombre = emp.get('nombre', '')
            cedula = emp.get('cedula', '')
            
            print(f"   {i}. NOMBRE FINAL: '{nombre}' | C√âDULA: '{cedula}'")
            
            if nombre == cedula:
                print(f"      ‚ùå PROBLEMA: El nombre final es igual a la c√©dula")
                problem_detected = True
            elif nombre.isdigit():
                print(f"      ‚ùå PROBLEMA: El nombre final es un n√∫mero")
                problem_detected = True
            elif ' ' in nombre and len(nombre) > 5:
                print(f"      ‚úÖ CORRECTO: Nombre formateado apropiadamente")
            else:
                print(f"      ‚ö†Ô∏è  Nombre inusual: '{nombre}'")
        
        if len(consolidated_data) > 5:
            print(f"   ... y {len(consolidated_data) - 5} empleados m√°s")
        print()
        
        # 6. Diagn√≥stico final
        print("6Ô∏è‚É£  DIAGN√ìSTICO FINAL:")
        print("-" * 40)
        
        if not problem_detected and consolidated_data:
            print("‚úÖ TODO EST√Å FUNCIONANDO CORRECTAMENTE")
            print("   Los nombres finales son correctos y est√°n formateados apropiadamente.")
            print("   Si a√∫n ves n√∫meros en tu PDF, puede ser que est√©s viendo un archivo generado anteriormente.")
            print("   Intenta generar un nuevo PDF con la aplicaci√≥n.")
        elif not consolidated_data:
            print("‚ùå NO SE ENCONTRARON COINCIDENCIAS")
            print("   Las c√©dulas del PDF no coinciden con las del Excel.")
            print("   Verifica que las c√©dulas est√©n en el mismo formato en ambos archivos.")
        else:
            print("‚ùå SE DETECTARON PROBLEMAS")
            print("   Los datos consolidados a√∫n contienen n√∫meros en lugar de nombres.")
            print("   Esto podr√≠a indicar un problema en el c√≥digo o en los datos.")
        
        print()
        print("üí° RECOMENDACIONES:")
        print("   1. Si todo se ve correcto aqu√≠, regenera el PDF completo")
        print("   2. Verifica que las c√©dulas en ambos archivos tengan el mismo formato")
        print("   3. Aseg√∫rate de que el Excel tenga una columna 'nombre' con nombres completos")
        print("   4. Si el problema persiste, comparte los archivos de ejemplo para revisi√≥n")
        
    except Exception as e:
        print(f"‚ùå ERROR durante el diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()
    
    print()
    print("="*70)
    print("üèÅ DIAGN√ìSTICO COMPLETADO")
    print("="*70)

if __name__ == "__main__":
    diagnostic_tool()