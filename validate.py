"""
Script de validaci√≥n simple para verificar que todos los m√≥dulos se cargan correctamente.
"""

import sys
import os

# Agregar src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """Prueba que todos los m√≥dulos se puedan importar correctamente."""
    print("=== Validaci√≥n de M√≥dulos de la App Facturaci√≥n ===\n")
    
    try:
        print("1. Probando importaci√≥n de pdf_extractor...")
        from src.pdf_extractor import PDFExtractor
        print("   ‚úì PDFExtractor importado correctamente")
        
        print("2. Probando importaci√≥n de excel_processor...")
        from src.excel_processor import ExcelProcessor
        print("   ‚úì ExcelProcessor importado correctamente")
        
        print("3. Probando importaci√≥n de data_matcher...")
        from src.data_matcher import DataMatcher
        print("   ‚úì DataMatcher importado correctamente")
        
        print("4. Probando importaci√≥n de pdf_generator...")
        from src.pdf_generator import PDFGenerator
        print("   ‚úì PDFGenerator importado correctamente")
        
        print("5. Probando importaci√≥n de ui...")
        from src.ui import MainApplication, create_gui_app
        print("   ‚úì UI modules importados correctamente")
        
        print("\n=== Pruebas B√°sicas de Funcionalidad ===\n")
        
        # Test b√°sico de DataMatcher
        print("6. Probando funcionalidad de DataMatcher...")
        matcher = DataMatcher(None, None)
        
        # Test normalizaci√≥n de texto
        result = matcher.normalize_text("Jos√© Mar√≠a P√©rez")
        expected = "jose maria perez"
        assert result == expected, f"Esperado '{expected}', obtenido '{result}'"
        print("   ‚úì Normalizaci√≥n de texto funciona correctamente")
        
        # Test similitud de nombres
        similarity = matcher.calculate_name_similarity("Juan P√©rez", "Juan P√©rez")
        assert similarity == 1.0, f"Esperado 1.0, obtenido {similarity}"
        print("   ‚úì C√°lculo de similitud funciona correctamente")
        
        print("7. Probando funcionalidad de PDFGenerator...")
        generator = PDFGenerator()
        print("   ‚úì PDFGenerator se inicializa correctamente")
        
        print("\n=== Verificaci√≥n de Dependencias ===\n")
        
        print("8. Verificando dependencias instaladas...")
        
        import pdfplumber
        print("   ‚úì pdfplumber disponible")
        
        import pandas as pd
        print("   ‚úì pandas disponible")
        
        import reportlab
        print("   ‚úì reportlab disponible")
        
        import PyPDF2
        print("   ‚úì PyPDF2 disponible")
        
        import openpyxl
        print("   ‚úì openpyxl disponible")
        
        print("\n=== ¬°TODAS LAS VALIDACIONES EXITOSAS! ===")
        print("\nLa aplicaci√≥n est√° lista para usar.")
        print("\nPara ejecutar la aplicaci√≥n:")
        print("  - Interfaz gr√°fica: python main.py")
        print("  - L√≠nea de comandos: python main.py --cli archivo.pdf empleados.xlsx")
        print("  - Ayuda: python main.py --help")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("\nAseg√∫rese de instalar todas las dependencias:")
        print("pip install -r requirements.txt")
        return False
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        return False

def test_file_structure():
    """Verifica que la estructura de archivos sea correcta."""
    print("\n=== Verificaci√≥n de Estructura de Archivos ===\n")
    
    required_files = [
        'main.py',
        'requirements.txt',
        'README.md',
        'src/__init__.py',
        'src/pdf_extractor.py',
        'src/excel_processor.py',
        'src/data_matcher.py',
        'src/pdf_generator.py',
        'src/ui.py',
        'examples/empleados_ejemplo.csv',
        'examples/README.md'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"   ‚úì {file_path}")
        else:
            print(f"   ‚ùå {file_path} (FALTANTE)")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö† Archivos faltantes: {len(missing_files)}")
        return False
    else:
        print("\n‚úì Todos los archivos requeridos est√°n presentes")
        return True

if __name__ == "__main__":
    print("Iniciando validaci√≥n de la App Facturaci√≥n...\n")
    
    # Verificar estructura de archivos
    structure_ok = test_file_structure()
    
    # Verificar imports y funcionalidad
    if structure_ok:
        imports_ok = test_imports()
        
        if imports_ok:
            print(f"\n{'='*50}")
            print("üéâ ¬°VALIDACI√ìN COMPLETA EXITOSA!")
            print("La aplicaci√≥n est√° lista para usar.")
            print(f"{'='*50}")
        else:
            print(f"\n{'='*50}")
            print("‚ùå VALIDACI√ìN FALL√ì")
            print("Revise los errores arriba y corrija antes de usar la aplicaci√≥n.")
            print(f"{'='*50}")
            sys.exit(1)
    else:
        print("\n‚ùå Estructura de archivos incompleta")
        sys.exit(1)